.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Cache::Memcached 3"
.TH Cache::Memcached 3 "2012-05-19" "perl v5.26.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Cache::Memcached \- client library for memcached (memory cache daemon)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Cache::Memcached;
\&
\&  $memd = new Cache::Memcached {
\&    \*(Aqservers\*(Aq => [ "10.0.0.15:11211", "10.0.0.15:11212", "/var/sock/memcached",
\&                   "10.0.0.17:11211", [ "10.0.0.17:11211", 3 ] ],
\&    \*(Aqdebug\*(Aq => 0,
\&    \*(Aqcompress_threshold\*(Aq => 10_000,
\&  };
\&  $memd\->set_servers($array_ref);
\&  $memd\->set_compress_threshold(10_000);
\&  $memd\->enable_compress(0);
\&
\&  $memd\->set("my_key", "Some value");
\&  $memd\->set("object_key", { \*(Aqcomplex\*(Aq => [ "object", 2, 4 ]});
\&
\&  $val = $memd\->get("my_key");
\&  $val = $memd\->get("object_key");
\&  if ($val) { print $val\->{\*(Aqcomplex\*(Aq}\->[2]; }
\&
\&  $memd\->incr("key");
\&  $memd\->decr("key");
\&  $memd\->incr("key", 2);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is the Perl \s-1API\s0 for memcached, a distributed memory cache daemon.
More information is available at:
.PP
.Vb 1
\&  http://www.danga.com/memcached/
.Ve
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.ie n .IP """new""" 4
.el .IP "\f(CWnew\fR" 4
.IX Item "new"
Takes one parameter, a hashref of options.  The most important key is
\&\f(CW\*(C`servers\*(C'\fR, but that can also be set later with the \f(CW\*(C`set_servers\*(C'\fR
method.  The servers must be an arrayref of hosts, each of which is
either a scalar of the form \f(CW\*(C`10.0.0.10:11211\*(C'\fR or an arrayref of the
former and an integer weight value.  (The default weight if
unspecified is 1.)  It's recommended that weight values be kept as low
as possible, as this module currently allocates memory for bucket
distribution proportional to the total host weights.
.Sp
Use \f(CW\*(C`compress_threshold\*(C'\fR to set a compression threshold, in bytes.
Values larger than this threshold will be compressed by \f(CW\*(C`set\*(C'\fR and
decompressed by \f(CW\*(C`get\*(C'\fR.
.Sp
Use \f(CW\*(C`no_rehash\*(C'\fR to disable finding a new memcached server when one
goes down.  Your application may or may not need this, depending on
your expirations and key usage.
.Sp
Use \f(CW\*(C`readonly\*(C'\fR to disable writes to backend memcached servers.  Only
get and get_multi will work.  This is useful in bizarre debug and
profiling cases only.
.Sp
Use \f(CW\*(C`namespace\*(C'\fR to prefix all keys with the provided namespace value.
That is, if you set namespace to \*(L"app1:\*(R" and later do a set of \*(L"foo\*(R"
to \*(L"bar\*(R", memcached is actually seeing you set \*(L"app1:foo\*(R" to \*(L"bar\*(R".
.Sp
Use \f(CW\*(C`connect_timeout\*(C'\fR and \f(CW\*(C`select_timeout\*(C'\fR to set connection and
polling timeouts. The \f(CW\*(C`connect_timeout\*(C'\fR defaults to .25 second, and
the \f(CW\*(C`select_timeout\*(C'\fR defaults to 1 second.
.Sp
The other useful key is \f(CW\*(C`debug\*(C'\fR, which when set to true will produce
diagnostics on \s-1STDERR.\s0
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP """set_servers""" 4
.el .IP "\f(CWset_servers\fR" 4
.IX Item "set_servers"
Sets the server list this module distributes key gets and sets between.
The format is an arrayref of identical form as described in the \f(CW\*(C`new\*(C'\fR
constructor.
.ie n .IP """set_debug""" 4
.el .IP "\f(CWset_debug\fR" 4
.IX Item "set_debug"
Sets the \f(CW\*(C`debug\*(C'\fR flag.  See \f(CW\*(C`new\*(C'\fR constructor for more information.
.ie n .IP """set_readonly""" 4
.el .IP "\f(CWset_readonly\fR" 4
.IX Item "set_readonly"
Sets the \f(CW\*(C`readonly\*(C'\fR flag.  See \f(CW\*(C`new\*(C'\fR constructor for more information.
.ie n .IP """set_norehash""" 4
.el .IP "\f(CWset_norehash\fR" 4
.IX Item "set_norehash"
Sets the \f(CW\*(C`no_rehash\*(C'\fR flag.  See \f(CW\*(C`new\*(C'\fR constructor for more information.
.ie n .IP """set_compress_threshold""" 4
.el .IP "\f(CWset_compress_threshold\fR" 4
.IX Item "set_compress_threshold"
Sets the compression threshold. See \f(CW\*(C`new\*(C'\fR constructor for more information.
.ie n .IP """set_connect_timeout""" 4
.el .IP "\f(CWset_connect_timeout\fR" 4
.IX Item "set_connect_timeout"
Sets the connect timeout. See \f(CW\*(C`new\*(C'\fR constructor for more information.
.ie n .IP """set_select_timeout""" 4
.el .IP "\f(CWset_select_timeout\fR" 4
.IX Item "set_select_timeout"
Sets the select timeout. See \f(CW\*(C`new\*(C'\fR constructor for more information.
.ie n .IP """enable_compress""" 4
.el .IP "\f(CWenable_compress\fR" 4
.IX Item "enable_compress"
Temporarily enable or disable compression.  Has no effect if \f(CW\*(C`compress_threshold\*(C'\fR
isn't set, but has an overriding effect if it is.
.ie n .IP """get""" 4
.el .IP "\f(CWget\fR" 4
.IX Item "get"
my \f(CW$val\fR = \f(CW$memd\fR\->get($key);
.Sp
Retrieves a key from the memcache.  Returns the value (automatically
thawed with Storable, if necessary) or undef.
.Sp
The \f(CW$key\fR can optionally be an arrayref, with the first element being the
hash value, if you want to avoid making this module calculate a hash
value.  You may prefer, for example, to keep all of a given user's
objects on the same memcache server, so you could use the user's
unique id as the hash value.
.ie n .IP """get_multi""" 4
.el .IP "\f(CWget_multi\fR" 4
.IX Item "get_multi"
my \f(CW$hashref\fR = \f(CW$memd\fR\->get_multi(@keys);
.Sp
Retrieves multiple keys from the memcache doing just one query.
Returns a hashref of key/value pairs that were available.
.Sp
This method is recommended over regular 'get' as it lowers the number
of total packets flying around your network, reducing total latency,
since your app doesn't have to wait for each round-trip of 'get'
before sending the next one.
.ie n .IP """set""" 4
.el .IP "\f(CWset\fR" 4
.IX Item "set"
\&\f(CW$memd\fR\->set($key, \f(CW$value\fR[, \f(CW$exptime\fR]);
.Sp
Unconditionally sets a key to a given value in the memcache.  Returns true
if it was stored successfully.
.Sp
The \f(CW$key\fR can optionally be an arrayref, with the first element being the
hash value, as described above.
.Sp
The \f(CW$exptime\fR (expiration time) defaults to \*(L"never\*(R" if unspecified.  If
you want the key to expire in memcached, pass an integer \f(CW$exptime\fR.  If
value is less than 60*60*24*30 (30 days), time is assumed to be relative
from the present.  If larger, it's considered an absolute Unix time.
.ie n .IP """add""" 4
.el .IP "\f(CWadd\fR" 4
.IX Item "add"
\&\f(CW$memd\fR\->add($key, \f(CW$value\fR[, \f(CW$exptime\fR]);
.Sp
Like \f(CW\*(C`set\*(C'\fR, but only stores in memcache if the key doesn't already exist.
.ie n .IP """replace""" 4
.el .IP "\f(CWreplace\fR" 4
.IX Item "replace"
\&\f(CW$memd\fR\->replace($key, \f(CW$value\fR[, \f(CW$exptime\fR]);
.Sp
Like \f(CW\*(C`set\*(C'\fR, but only stores in memcache if the key already exists.  The
opposite of \f(CW\*(C`add\*(C'\fR.
.ie n .IP """delete""" 4
.el .IP "\f(CWdelete\fR" 4
.IX Item "delete"
\&\f(CW$memd\fR\->delete($key[, \f(CW$time\fR]);
.Sp
Deletes a key.  You may optionally provide an integer time value (in seconds) to
tell the memcached server to block new writes to this key for that many seconds.
(Sometimes useful as a hacky means to prevent races.)  Returns true if key
was found and deleted, and false otherwise.
.Sp
You may also use the alternate method name \fBremove\fR, so
Cache::Memcached looks like the Cache::Cache \s-1API.\s0
.ie n .IP """incr""" 4
.el .IP "\f(CWincr\fR" 4
.IX Item "incr"
\&\f(CW$memd\fR\->incr($key[, \f(CW$value\fR]);
.Sp
Sends a command to the server to atomically increment the value for
\&\f(CW$key\fR by \f(CW$value\fR, or by 1 if \f(CW$value\fR is undefined.  Returns undef if \f(CW$key\fR
doesn't exist on server, otherwise it returns the new value after
incrementing.  Value should be zero or greater.  Overflow on server
is not checked.  Be aware of values approaching 2**32.  See decr.
.ie n .IP """decr""" 4
.el .IP "\f(CWdecr\fR" 4
.IX Item "decr"
\&\f(CW$memd\fR\->decr($key[, \f(CW$value\fR]);
.Sp
Like incr, but decrements.  Unlike incr, underflow is checked and new
values are capped at 0.  If server value is 1, a decrement of 2
returns 0, not \-1.
.ie n .IP """stats""" 4
.el .IP "\f(CWstats\fR" 4
.IX Item "stats"
\&\f(CW$memd\fR\->stats([$keys]);
.Sp
Returns a hashref of statistical data regarding the memcache server(s),
the \f(CW$memd\fR object, or both.  \f(CW$keys\fR can be an arrayref of keys wanted, a
single key wanted, or absent (in which case the default value is malloc,
sizes, self, and the empty string).  These keys are the values passed
to the 'stats' command issued to the memcached server(s), except for
\&'self' which is internal to the \f(CW$memd\fR object.  Allowed values are:
.RS 4
.ie n .IP """misc""" 4
.el .IP "\f(CWmisc\fR" 4
.IX Item "misc"
The stats returned by a 'stats' command:  pid, uptime, version,
bytes, get_hits, etc.
.ie n .IP """malloc""" 4
.el .IP "\f(CWmalloc\fR" 4
.IX Item "malloc"
The stats returned by a 'stats malloc':  total_alloc, arena_size, etc.
.ie n .IP """sizes""" 4
.el .IP "\f(CWsizes\fR" 4
.IX Item "sizes"
The stats returned by a 'stats sizes'.
.ie n .IP """self""" 4
.el .IP "\f(CWself\fR" 4
.IX Item "self"
The stats for the \f(CW$memd\fR object itself (a copy of \f(CW$memd\fR\->{'stats'}).
.ie n .IP """maps""" 4
.el .IP "\f(CWmaps\fR" 4
.IX Item "maps"
The stats returned by a 'stats maps'.
.ie n .IP """cachedump""" 4
.el .IP "\f(CWcachedump\fR" 4
.IX Item "cachedump"
The stats returned by a 'stats cachedump'.
.ie n .IP """slabs""" 4
.el .IP "\f(CWslabs\fR" 4
.IX Item "slabs"
The stats returned by a 'stats slabs'.
.ie n .IP """items""" 4
.el .IP "\f(CWitems\fR" 4
.IX Item "items"
The stats returned by a 'stats items'.
.RE
.RS 4
.RE
.ie n .IP """disconnect_all""" 4
.el .IP "\f(CWdisconnect_all\fR" 4
.IX Item "disconnect_all"
\&\f(CW$memd\fR\->disconnect_all;
.Sp
Closes all cached sockets to all memcached servers.  You must do this
if your program forks and the parent has used this module at all.
Otherwise the children will try to use cached sockets and they'll fight
(as children do) and garble the client/server protocol.
.ie n .IP """flush_all""" 4
.el .IP "\f(CWflush_all\fR" 4
.IX Item "flush_all"
\&\f(CW$memd\fR\->flush_all;
.Sp
Runs the memcached \*(L"flush_all\*(R" command on all configured hosts,
emptying all their caches.  (or rather, invalidating all items
in the caches in an O(1) operation...)  Running stats will still
show the item existing, they're just be non-existent and lazily
destroyed next time you try to detch any of them.
.SH "BUGS"
.IX Header "BUGS"
When a server goes down, this module does detect it, and re-hashes the
request to the remaining servers, but the way it does it isn't very
clean.  The result may be that it gives up during its rehashing and
refuses to get/set something it could've, had it been done right.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This module is Copyright (c) 2003 Brad Fitzpatrick.
All rights reserved.
.PP
You may distribute under the terms of either the \s-1GNU\s0 General Public
License or the Artistic License, as specified in the Perl \s-1README\s0 file.
.SH "WARRANTY"
.IX Header "WARRANTY"
This is free software. \s-1IT COMES WITHOUT WARRANTY OF ANY KIND.\s0
.SH "FAQ"
.IX Header "FAQ"
See the memcached website:
   http://www.danga.com/memcached/
.SH "AUTHORS"
.IX Header "AUTHORS"
Brad Fitzpatrick <brad@danga.com>
.PP
Anatoly Vorobey <mellon@pobox.com>
.PP
Brad Whitaker <whitaker@danga.com>
.PP
Jamie McCarthy <jamie@mccarthy.vg>
