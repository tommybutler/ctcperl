.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "CRC32 3"
.TH CRC32 3 "2018-07-02" "perl v5.26.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
String::CRC32 \- Perl interface for cyclic redundancy check generation
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use String::CRC32;
\&    
\&    $crc = crc32("some string");
\&    $crc = crc32("some string", initvalue);
\&
\&    $somestring = "some string";
\&    $crc = crc32($somestring);
\&
\&    open my $fh, \*(Aq<\*(Aq, \*(Aqlocation/of/some.file\*(Aq or die $!;
\&    binmode $fh;
\&    $crc = crc32($fh);
\&    close $fh;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \fB\s-1CRC32\s0\fR module calculates \s-1CRC\s0 sums of 32 bit lengths.
It generates the same \s-1CRC\s0 values as \s-1ZMODEM, PKZIP, PICCHECK\s0 and
many others.
.PP
Despite its name, this module is able to compute
the checksum of files as well as strings.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.Vb 1
\&    $crc = crc32("some string");
.Ve
.PP
results in the same as
.PP
.Vb 1
\&    $crc = crc32(" string", crc32("some"));
.Ve
.PP
This is useful for subsequent \s-1CRC\s0 checking of substrings.
.PP
You may even check files:
.PP
.Vb 4
\&    open my $fh, \*(Aq<\*(Aq, \*(Aqlocation/of/some.file\*(Aq or die $!;
\&    binmode $fh;
\&    $crc = crc32($fh);
\&    close $fh;
.Ve
.PP
A init value may also have been supplied in the above example.
.SH "AUTHOR"
.IX Header "AUTHOR"
Soenke J. Peters <peters_\|_perl@opcenter.de>
.PP
Current maintainer: \s-1LEEJO\s0
.PP
Address bug reports and comments to: <https://github.com/leejo/string\-crc32/issues>
.SH "LICENSE"
.IX Header "LICENSE"
\&\s-1CRC\s0 algorithm code taken from \s-1CRC\-32\s0 by Craig Bruce. 
The module stuff is inspired by a similar perl module called 
String::CRC by David Sharnoff & Matthew Dillon.
Horst Fickenscher told me that it could be useful to supply an init
value to the crc checking function and so I included this possibility.
.PP
The author of this package disclaims all copyrights and 
releases it into the public domain.
